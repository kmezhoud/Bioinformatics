[["index.html", "Bioinformatic Tutorial Chapter 1 Introduction", " Bioinformatic Tutorial Karim Mezhoud 2022-10-31 Chapter 1 Introduction "],["databases.html", "Chapter 2 Databases", " Chapter 2 Databases "],["cross.html", "Chapter 3 Sequence Alignment", " Chapter 3 Sequence Alignment "],["d-protein-structure-prediction.html", "Chapter 4 3D protein Structure Prediction", " Chapter 4 3D protein Structure Prediction "],["docking.html", "Chapter 5 Docking", " Chapter 5 Docking "],["interactomics.html", "Chapter 6 Interactomics 6.1 Oral presentation 6.2 Graphical identification of cancer-associated gene sub-networks based on small proteomics data sets 6.3 Terminal Analysis of network", " Chapter 6 Interactomics 6.1 Oral presentation Include slides 6.2 Graphical identification of cancer-associated gene sub-networks based on small proteomics data sets This tutorial describes the main steps used to construct an enriched network from a list of genes with their expression values. The network includes the fold change, the False discovery rate (FDR), the gene expression correlation, the most often involved biological processes, and the most likely corresponding diseases. All the main steps are illustrated by screen shots. The Tools &amp; Data section lists all the tools and data required. The “Data computing” section shows you how to compute the data. The Experimental procedure section lists briefly all the steps, and the Walk-through example section illustrates these steps. The final section lists all the software and packages that were tested during this study, but not selected for inclusion in this Note. 6.2.1 Tools &amp; Data For this tutorial you will need: Bioinformatic tools Cytoscape (Shannon et al. 2003; Cline et al. 2007) software implemented by Reactome FIs (Wu, Feng, and Stein 2010), Advanced Network merge, NetworkAnalyzer, and ClueGO (Bindea et al. 2009), yFiles Layout Algorithms Apps. Experimental Data To find out more about the file format, download the corresponding supplemental file indicated in parentheses. The list of modulated protein saved in one column in text file (only_modulated_symbol.txt). Convert the protein ID on gene symbol (HGNC or HUGO symbol) using ID Mapping service, such as: BioMart Uniprot Idconverter (Alibés et al. 2007) GAGE (Luo et al. 2009) with the eg2sym function. The protein expression values. The following example of gene expression is divided into two groups and 3 replicates. (proteinEXP.txt) Node Attributes Fold change of the protein identified (Fold_Change.NA) False discovery rate of the z score or some other statistical test (FDR.NA) Correlated protein expression by statistical analysis (Correlation_Network.sif) Cancer-protein network (Cancer_Network.sif) Edge attributes The correlation rate of Protein expression (Correlation+Cancer.EA) The gene expression profile overlap between our experiments and clinical data from the cBio Cancer Genomics Portal Gao et al. (2013) (Correlation+Cancer.EA) 6.2.2 Data Computing 6.2.2.1 Gene list We assume that the protein list with quantitative analysis has already been compiled . Supplemental proteinEXP.txt file gives an example of the quantitative data which will be used. Pre-process the expression data into a format suitable for network analysis, clean the data by removing obvious outlier samples or excessive numbers of missing entries, and then load the data. The gene list is selected after statistical analysis. The Fold change and False discovery rate are then computed and saved in the corresponding files: Fold_Change.NA and FDR.NA. 6.2.2.2 Multiple Correlation analysis of protein expression Two genes are said to be connected by an edge if their expression values are closely correlated (statistical significance). We used CORREP package (Zhu, Li, and Li 2007) to estimate the gene expression correlation. This program assumes that data are arranged with the variables (genes) in rows and conditions (persons) in columns . It is strongly suggested that factor names be included in the data file, as this information is used in the results output. We specified that the proteins (or genes) are the variables, and the people correspond to the different conditions. In our case we have 235 variables, 6 conditions, and one replicate. It is not possible to carry out multiple correlation analysis using only two conditions and 3 replicates (like in our experimental design). Following R codes makes it possible to compute and extract correlated gene expression levels upper that threshold. # Install CORREP package from Bioconductor if (!require(&quot;BiocManager&quot;, quietly = TRUE)) install.packages(&quot;BiocManager&quot;) BiocManager::install(&quot;CORREP&quot;) Load needed package library(dplyr) # read expression data proteinEXP &lt;- read.table(file = &quot;data/cytoscape_input/proteinEXP.txt&quot;, header = TRUE, row.names = 1) head(proteinEXP) ## X114 X115 X116 X117 X118 X119 ## APOB 8.8836 8.4219 8.6484 8.9165 8.9223 8.7495 ## CO4B 6.6138 6.5679 6.2675 5.9642 6.6172 6.7896 ## FINC 8.2777 7.5958 8.4576 8.5394 8.2058 8.6693 ## C3 8.9511 8.3720 8.9676 8.7350 8.4286 8.6948 ## FIBA 8.5089 8.1466 8.4419 8.5200 8.4169 8.4757 ## FIBB 7.9144 7.4734 7.8074 7.9873 7.6940 8.0420 # standardization / Scale matrix # Apply by rows (1), the function x/sd(x) proteinEXP.std &lt;- apply(X = proteinEXP, MARGIN = 1, FUN = function(x) x/sd(x)) |&gt; t() # transpose the matrix proteinEXP.std |&gt; head(4) # return the first 4 rows ## X114 X115 X116 X117 X118 X119 ## APOB 45.22405 42.87366 44.02671 45.39154 45.42106 44.54139 ## CO4B 22.02363 21.87078 20.87047 19.86049 22.03495 22.60903 ## FINC 21.76372 19.97087 22.23671 22.45178 21.57468 22.79331 ## C3 35.56489 33.26399 35.63045 34.70627 33.48887 34.54655 ## run correlation for matrix x with 1 replicate and 235 genes cor.proteinEXP.std &lt;- CORREP::cor.balance(x = proteinEXP.std, m=1, G=235) genes &lt;- rownames(proteinEXP) colnames(cor.proteinEXP.std) &lt;- genes rownames(cor.proteinEXP.std) &lt;- genes #class(cor.proteinEXP.std) #dim(cor.proteinEXP.std) cor.proteinEXP.std[1:5, 1:5] ## APOB CO4B FINC C3 FIBA ## APOB 1.0000000 -0.1450790 0.5262003 0.2474453 0.7064784 ## CO4B -0.1450790 1.0000000 -0.1765416 -0.2414720 -0.2066355 ## FINC 0.5262003 -0.1765416 1.0000000 0.5207811 0.7540140 ## C3 0.2474453 -0.2414720 0.5207811 1.0000000 0.5815279 ## FIBA 0.7064784 -0.2066355 0.7540140 0.5815279 1.0000000 # find indexes of all correlated genes upper/equal than 0.81 and under 1 idx &lt;- which(abs(cor.proteinEXP.std) &gt;=0.811 &amp; abs(cor.proteinEXP.std) &lt; 1 ,arr.ind=TRUE) head(idx) ## row col ## CLU 23 3 ## HABP2 90 4 ## MASP1 42 5 ## C1QB 82 5 ## VWF 85 5 ## PROC 100 5 # get correlated genes with rate value cor.proteinEXP.std.filter &lt;- data.frame(gene1 = genes[idx[,1]], gene2= genes[idx[,2]], value= cor.proteinEXP.std[idx]) #dim(cor.proteinEXP.std.filter) head(cor.proteinEXP.std.filter) ## gene1 gene2 value ## 1 CLU FINC 0.8194270 ## 2 HABP2 C3 0.8152893 ## 3 MASP1 FIBA 0.8113223 ## 4 C1QB FIBA 0.8124264 ## 5 VWF FIBA 0.8205580 ## 6 PROC FIBA 0.8186229 From cor.proteinEXP.std.filter object we can generate correlated gene network. Cytoscape accepts files with with .sif extention as following gene1[space]PP[space]gene2. correlation_network &lt;- paste0(cor.proteinEXP.std.filter$gene1, &quot; PP &quot;, cor.proteinEXP.std.filter$gene2) write.table(correlation_network, file = &quot;data/cytoscape_input/new_version/Correlation_Network.sif&quot;, row.names = FALSE, quote = FALSE, col.names=&quot;&quot;) head(correlation_network) ## [1] &quot;CLU PP FINC&quot; &quot;HABP2 PP C3&quot; &quot;MASP1 PP FIBA&quot; &quot;C1QB PP FIBA&quot; ## [5] &quot;VWF PP FIBA&quot; &quot;PROC PP FIBA&quot; The format of edge attributes that will be imported by Cytoscape must has this format gene1[space](PP)[space]gene2[space]correlation_value. In our case, we need to concatenate the three columns and add +%28pp%29+ between genes and = before value. # paste columns correlated_genes.EA &lt;- paste0(cor.proteinEXP.std.filter$gene1, &quot; (PP) &quot;, cor.proteinEXP.std.filter$gene2, &quot;,&quot;, cor.proteinEXP.std.filter$value) length(correlated_genes.EA) ## [1] 604 head(correlated_genes.EA) ## [1] &quot;CLU (PP) FINC,0.819427009997673&quot; &quot;HABP2 (PP) C3,0.815289326650268&quot; ## [3] &quot;MASP1 (PP) FIBA,0.811322313383614&quot; &quot;C1QB (PP) FIBA,0.812426366252153&quot; ## [5] &quot;VWF (PP) FIBA,0.820558036278007&quot; &quot;PROC (PP) FIBA,0.818622903586112&quot; The correlated_genes.EA object is the Egdes Attribution of correlated genes. It will be saved and used as input file for cytoscape. But before to save it, we need to add Edges attribution of interaction between genes and cancers. We will use cBio Portal web service to predict the frequency of altered genes (only_modulated_symbol.txt file) in existing cancers studies. 6.2.2.3 Query cBio Portal 6.2.2.3.1 Cancer Type Frequencies We have 27 genes and the cBioPortal accepts queries with limited genes number 14. We subset the genes list to 2 groups and merge the outputs together. The gene list was submitted with the curated set of non redundant studies option. This first request told us how much the genes were modulated in selected cancer types. All cancers type were then ranked in decreasing order of the overlap of their gene expression profiles. The table will saved as Cancer-frequency.NA. After quering, go to the Cancer Type Summary Tab and visualize the results. Download the data and save it as cancer_type_summary_1.txt. Repeat the same process for the remains 13 genes and save it as cancer_type_summary_2.txt. cancer_type_summary_1 &lt;- read.table(file = &quot;data/cBioPortal_output/cancer_types_summary_1.txt&quot;, header = TRUE, sep = &quot;\\t&quot;) cancer_type_summary_2 &lt;- read.table(file = &quot;data/cBioPortal_output/cancer_types_summary_2.txt&quot;, header = TRUE, sep = &quot;\\t&quot;) head(cancer_type_summary_1) ## Cancer.Type Alteration.Frequency Alteration.Type ## 1 Invasive Breast Carcinoma 7.518797 multiple ## 2 Invasive Breast Carcinoma 4.511278 homdel ## 3 Invasive Breast Carcinoma 52.631579 amp ## 4 Invasive Breast Carcinoma 1.503759 mutated ## 5 Lung Cancer 10.256410 multiple ## 6 Lung Cancer 46.153846 amp ## Alteration.Count ## 1 10 ## 2 6 ## 3 70 ## 4 2 ## 5 4 ## 6 18 Alteration.Frequency variable is computed for each query of all input genes list. In our case we have to compute the mean/median of Alteraction.Frequency of the two queries. cancer_type_summary_1_freq &lt;- cancer_type_summary_1 |&gt; group_by(Cancer.Type) |&gt; mutate(Count = sum(Alteration.Count), Freq = sum(Alteration.Frequency)) |&gt; #select(Cancer.Type, Alteration.Frequency, Freq) |&gt; distinct(Cancer.Type, Freq, .keep_all = FALSE) |&gt; arrange(desc(Freq)) |&gt; mutate(Freq = round(Freq/100, digits = 2)) cancer_type_summary_2_freq &lt;- cancer_type_summary_2 |&gt; group_by(Cancer.Type) |&gt; mutate(Count = sum(Alteration.Count), Freq = sum(Alteration.Frequency)) |&gt; #select(Cancer.Type, Alteration.Frequency, Freq) |&gt; distinct(Cancer.Type, Freq, .keep_all = FALSE) |&gt; arrange(desc(Freq)) |&gt; mutate(Freq = round(Freq/100, digits = 2)) head(cancer_type_summary_1_freq) ## # A tibble: 6 × 2 ## # Groups: Cancer.Type [6] ## Cancer.Type Freq ## &lt;chr&gt; &lt;dbl&gt; ## 1 Invasive Breast Carcinoma 0.66 ## 2 Lung Cancer 0.59 ## 3 Ovarian Cancer 0.58 ## 4 Ovarian Epithelial Tumor 0.47 ## 5 Uterine Endometrioid Carcinoma 0.46 ## 6 Bladder/Urinary Tract Cancer, NOS 0.46 # bind the two summaries and compute the mean cancer_type_summary_freq &lt;- cancer_type_summary_1_freq |&gt; bind_rows(cancer_type_summary_2_freq) |&gt; group_by(Cancer.Type) |&gt; mutate(Freq_mean= mean(Freq)) |&gt; arrange(Cancer.Type) |&gt; distinct(Cancer.Type, Freq_mean) |&gt; arrange(desc(Freq_mean)) head(cancer_type_summary_freq,n = 6) ## # A tibble: 6 × 2 ## # Groups: Cancer.Type [6] ## Cancer.Type Freq_mean ## &lt;chr&gt; &lt;dbl&gt; ## 1 Lung Cancer 0.585 ## 2 Ovarian Cancer 0.495 ## 3 Invasive Breast Carcinoma 0.49 ## 4 Uterine Endometrioid Carcinoma 0.44 ## 5 Skin Cancer, Non-Melanoma 0.43 ## 6 Bladder/Urinary Tract Cancer, NOS 0.425 ## use comma to separate column. cancer type label column has space. During importing this file use comma as separated column cancer_frequency &lt;- paste0(cancer_type_summary_freq$Cancer.Type, &quot;,&quot;, cancer_type_summary_freq$Freq_mean) ## rename with short label ## we will to this manually since we have 6-10 labels #dput(head(cancer_type_summary_freq$Cancer.Type, 10)) manual_cancer_type_label &lt;- c(&quot;Lung&quot;, &quot;Ovarian&quot;, &quot;Breast&quot;,&quot;Uterine&quot;, &quot;Skin&quot;, &quot;Bladder&quot;, &quot;Melanoma&quot;, &quot;Endometrial&quot;, &quot;Esophagogastric&quot;) manual_cancer_frequency &lt;- paste0(manual_cancer_type_label, &quot;,&quot;, cancer_type_summary_freq$Freq_mean[1:9]) ## save only the first 6 cancers write.table(manual_cancer_frequency, file = &quot;data/cytoscape_input/new_version/Cancer_frequency.NA&quot;, row.names = FALSE, quote = FALSE, col.names = &quot;Cancer,Size&quot; ) head(manual_cancer_frequency) ## [1] &quot;Lung,0.585&quot; &quot;Ovarian,0.495&quot; &quot;Breast,0.49&quot; &quot;Uterine,0.44&quot; ## [5] &quot;Skin,0.43&quot; &quot;Bladder,0.425&quot; rename cancer with short label is usefull for graph visualization. 6.2.2.3.2 Gene Alteration Frequency by Cancer Type In the second step, the search was refined by specifying the cancers (one by one), which involved a wider range of gene lists. We will focus on the first 5 cancer type listed by cancer_type_summary_freq object. We used only the “mRNA Expression Z-Scores vs Normals” option. We specified the direction of the modulation using Advanced: Onco Query Language (OQL). For example, with PZP: EXP &gt; 1, the search selects only cancer cases that display up-regulation of PZP. Based on the Fold_Change.NA file, we used OQL as explained in supplemental only-modulatedEXP.txt. We started by Lung Cancer which has the higher frequency. We have to search manually which Lung cancer study has mRNa expression data. Select studies with biggest samples essais. There is no way to filter studies by genomic profile. check boxes one by one and see if mRNA expression option appears. In this case we can query more gene list (27). Save the file as gene_alteration_frequency_Lung.tsv. gene_alteration_frequency_Lung &lt;- read.table(&quot;data/cBioPortal_output/gene_alteration_frequency_Lung.tsv&quot;, header = TRUE, sep = &quot;\\t&quot;) head(gene_alteration_frequency_Lung) ## Gene.Symbol OQL.Line Num.Samples.Altered Percent.Samples.Altered ## 1 CFHR2 CFHR2: EXP&lt;1; 229 100% ## 2 CRP CRP: EXP&lt;1; 225 98% ## 3 CFHR1 CFHR1: EXP&lt;1; 217 94% ## 4 ADH4 ADH4: EXP&lt;1; 212 92% ## 5 PRAP1 PRAP1: EXP&lt;1; 206 90% ## 6 LGALS3BP LGALS3BP: EXP&lt;1; 203 88% The next step is to attribute gene alteration frequency to gene-cancer Edges. Based on gene_alteration_frequency_Lung object we need to build a list like gene1+%28pp%29+cancer1=gene_alteration_rate and joint it to correlated_genes.EA gene_cancer_freq_Lung &lt;- paste0(gene_alteration_frequency_Lung$Gene.Symbol, &quot; (PP) &quot;, &quot;Lung,&quot;, as.numeric(sub(&quot;%&quot;,&quot;&quot;, gene_alteration_frequency_Lung$Percent.Samples.Altered))/100 ) head(gene_cancer_freq_Lung) ## [1] &quot;CFHR2 (PP) Lung,1&quot; &quot;CRP (PP) Lung,0.98&quot; ## [3] &quot;CFHR1 (PP) Lung,0.94&quot; &quot;ADH4 (PP) Lung,0.92&quot; ## [5] &quot;PRAP1 (PP) Lung,0.9&quot; &quot;LGALS3BP (PP) Lung,0.88&quot; Do the same steps for the 5 others Cancer Type: Ovarian Cancer, Invasive Breast, Uterine Endometrioid Carcinoma, Skin Cancer Non-Melanoma, Bladder/Urinary Tract Cancer gene_alteration_frequency_Breast &lt;- read.table(&quot;data/cBioPortal_output/gene_alteration_frequency_Breast.tsv&quot;, header = TRUE, sep = &quot;\\t&quot;) gene_alteration_frequency_Bladder &lt;- read.table(&quot;data/cBioPortal_output/gene_alteration_frequency_Bladder.tsv&quot;, header = TRUE, sep = &quot;\\t&quot;) gene_alteration_frequency_Skin &lt;- read.table(&quot;data/cBioPortal_output/gene_alteration_frequency_Skin.tsv&quot;, header = TRUE, sep = &quot;\\t&quot;) gene_alteration_frequency_Uterine &lt;- read.table(&quot;data/cBioPortal_output/gene_alteration_frequency_Uterine.tsv&quot;, header = TRUE, sep = &quot;\\t&quot;) gene_alteration_frequency_5_cancers &lt;- bind_rows(cbind(gene_alteration_frequency_Lung, Cancer = &quot;Lung&quot;), cbind(gene_alteration_frequency_Breast, Cancer=&quot;Breast&quot;), cbind(gene_alteration_frequency_Bladder, Cancer=&quot;Bladder&quot;), cbind(gene_alteration_frequency_Skin, Cancer=&quot;Skin&quot;), cbind(gene_alteration_frequency_Uterine, Cancer = &quot;Uterine&quot;) ) gene_cancer_freq_5_cancers &lt;- paste0(gene_alteration_frequency_5_cancers$Gene.Symbol, &quot; (PP) &quot;, gene_alteration_frequency_5_cancers$Cancer, &quot;,&quot;, as.numeric(sub(&quot;%&quot;,&quot;&quot;, gene_alteration_frequency_Lung$Percent.Samples.Altered))/100 ) tail(gene_cancer_freq_5_cancers) ## [1] &quot;VCP (PP) Uterine,0.14&quot; &quot;TPM4 (PP) Uterine,0.13&quot; ## [3] &quot;TFRC (PP) Uterine,0.13&quot; &quot;RAP1A (PP) Uterine,0.12&quot; ## [5] &quot;GC (PP) Uterine,0.026&quot; &quot;IGHD (PP) Uterine,0&quot; Concatenate the gene_cancer_freq_5_cancers with correlated_genes.EA objects of Edge Attributions. correlation_cancer.EA &lt;- c(correlated_genes.EA, gene_cancer_freq_5_cancers) write.table(correlation_cancer.EA, file = &quot;data/cytoscape_input/new_version/Correlation+Cancer.EA&quot;, row.names = FALSE, quote = FALSE, col.names=&quot;Name,Correlation&quot;) tail(correlation_cancer.EA) ## [1] &quot;VCP (PP) Uterine,0.14&quot; &quot;TPM4 (PP) Uterine,0.13&quot; ## [3] &quot;TFRC (PP) Uterine,0.13&quot; &quot;RAP1A (PP) Uterine,0.12&quot; ## [5] &quot;GC (PP) Uterine,0.026&quot; &quot;IGHD (PP) Uterine,0&quot; From gene_cancer_freq_5_cancers object we can sa gene_cancer network. Cancer_Network &lt;- paste0(gene_alteration_frequency_5_cancers$Gene.Symbol, &quot; PP &quot;, gene_alteration_frequency_5_cancers$Cancer) write.table(Cancer_Network, file = &quot;data/cytoscape_input/new_version/Cancer_Network.sif&quot;, row.names = FALSE, quote = FALSE, col.names=c(&quot;Gene PP Cancer&quot;)) head(Cancer_Network) ## [1] &quot;CFHR2 PP Lung&quot; &quot;CRP PP Lung&quot; &quot;CFHR1 PP Lung&quot; &quot;ADH4 PP Lung&quot; ## [5] &quot;PRAP1 PP Lung&quot; &quot;LGALS3BP PP Lung&quot; 6.2.3 Cytoscape Steps 6.2.3.1 Steps Summary 6.2.3.1.1 Network Construction Construct the protein interaction network using modulated proteins (Network 1). Construct the correlation network using the CORREP matrix (Network 2). Merge networks 1 and 2 (Network 3). Organize the network using organic Layout. 6.2.3.1.2 Attribute Reactome Function Interaction Fetch Function Interaction (FI) annotations for node Analyze the network functions. Cluster the Function Interaction Network Analyze module functions Optimize the network view using the tool panel (scaling and rotating) and manual organization 6.2.3.1.3 Attribute Experimental data Nodes attributes Load Fold_change.NA Load FDR.NA Edges Attribute Load Correlation.EA 6.2.3.1.4 VizMapper Setting Reactome FI attributes Node Color: Cancer Module (from Reactome FI visual style) Node Label: canonical name (from Reactome FI visual style) Node Shape: IsLinker (from Reactome FI visual style) Edge Line style: FI annotation (from Reactome FI visual style) Edges Source Arrow: FI Direction (from Reactome FI visual style) Edges Target Arrow: FI Direction (from Reactome FI visual style) Experimental Data attributes Node border Color: Fold change (From Fold_Change.NA file) Node line width: False Discovery Rate (FDR) (from FDR.NA file) Edge line width: Multiple Correlation Analysis and Cancer cases overlapping (from Correlation+Cancer.EA file) Edge line color: Multiple Correlation Analysis (from Correlation+Cancer.EA file) 6.2.3.1.5 Cancer-protein Network Construction Import the cancer-protein network from the Cancer_Network.sif file. Merge Cancer_Network and Network 3. Rename network as Network 4. Attribute the Cancer-frequency to node size. Optimize the view using the organic Layout and Tool panel. 6.2.3.1.6 Biological Process Enrichment : ClueGO setting Launch the ClueGO cytoscape plug-in. Set the type of analysis: single cluster Select the organism: Homo sapiens, and the type of IDs used (symbol) Load sample gene lists from file (only-modulated_symbol.txt). Select the Ontologies: GO_BiologicalProcess (Evidence codes:EXP, IDA, IMP) KEGG_Pathways (not necessary) REACTOME_BioCarta (not necessary) Select the statistical test: Enrichment/Depletion (Two-sided hypergeometric test) Select the correlation method: Bonferroni Use default advanced settings Start. 6.2.3.2 Walk through example Open a new Cytoscape session and save it as networks.cys 6.2.3.2.1 Network Construction Load the gene list only-modulated_symbol.txt through the Reactome FI App, and use linker genes. Click OK. Cytoscape FI setting Reactome FI search for our gene list (black label) and add linker genes (red label). Network constructed by Cytoscape FI with the only-modulated-symbol.txt file Import correlation network from Correlation_Network.sif file. Remove duplicated edges. Rename Node Label Merge the two networks (only-modulated-symbol.txt and Correlation_Network.sif) using Tools/Merge/Union Rename the unified network as Network 3. Merging only-modulated-symbol.txt and Correlation_Network.sif The Layout setting (organic Layout) 6.2.3.2.2 Attribute Reactome Function Interaction The main features of the Reactome FI App should be selected from a popup menu, which can be displayed by right clicking on an empty space in the network view panel. Edges will be displayed on the basis of the FI direction attribute values. In the following screen shot, the edge table summarize the shapes of edges: * “-&gt;” for activating/catalyzing, * “-|” for inhibition, * “-” for FIs extracted from complexes or inputs, * “—” for predicted FIs, * Node Label: canonical name or ID, * Node Shape: IsLinker. * for more detail, See in the style tab: Node Shape, Edge Source, Arrow Shape and Edge Target Arrow Shape values. 6.2.3.2.3 Analyse Network Functions (Reactome FI) A new table appears fir Biological Process. You can choose to filter the enrichment results by an FDR cutoff value. 6.2.3.2.4 Cluster Function Interactions network (Reactome FI) 6.2.3.2.5 Analyse of the module functions : Pathway enrichment Pathway term enrichment analysis. 6.2.3.2.5.1 Style setting from Reactome FI visual style Node Label: name or ID Node Shape: IsLinker (from Reactome FI visual style) Node Color: Module(from Reactome FI visual style) Edges Target Arrow: FI Direction (from Reactome FI visual style) 6.2.3.2.6 Attribute Experimental data for nodes Import Node attributes files (Fold_Change.NA and FDR.NA). Attribute Node line width and Node line color as “Fold Change” and “FDR” Select the value of the Node Border color to Fold Change Select the value of the Node line width to FDR Set the mapping Type to Continuous Mapping Attribute Node line width and Node line color as Fold Change and FDR, respectively. Negative and Positive fold changes are indicated by blue and red, respectively. The intensity of the color depends on the fold change value. The node width line is limited by the FDR interval [0-0.05]. The node color module has been omitted to make it easier to view the node line. 6.2.3.2.7 Attribute Experimental data for edges Import Correlation+Cancer.EA file * Attribute edge color and width The correlation coefficients have been multiplied by 2.5 to distinguish in the graph between the correlation values and the cancer values. The edge line width was set to r&lt;-2.07 and r&gt;2.18, corresponding to r&lt;-0.807 and r&gt;0.818, respectively. Negative and the Positive correlations are indicated by blue and red, respectively. 6.2.3.2.8 Cancer-protein Network Construction Import Cancer network from the Cancer_Network.sif file Merge with Union option Cancer_Network.sif with Network 3. Check during this step in Advanced options that Matching column is name, if not select columns with common labels of nodes. * Rename network as Network 4 * Go to style tab and use FI Network network style (from ReactomeFI) * Optimize the view using organic Layout and manual organization. * Reset/optimize the edge line width and edge color as following in order to distinguish the cancer edges. The node color was reset using the cluster module color. The cancer nodes are in the default color (green). The edge color mapping has been optimized so that cancer node interactions stand out in green. The edge width line has been optimized so as to highlight the genes most frequently regulated in cancers. Import Cancer_frequency.NA file and Attribute frequency to node size. The most probable cancers are distinguished by node size. In this case clinical Lung carcinoma data display the most gene expression overlap with our data. 6.2.3.2.9 Biological Process enrichment – ClueGO 6.2.3.2.9.1 ClueGO Setting All results were created with ClueGO v2.5.9 Organism analyzed: Homo Sapiens [9606] Identifier types used: [SymbolID] Evidence codes used: [All] Genes in GO_MolecularFunction-EBI-UniProt-GOA-ACAP-ARAP_25.05.2022_00h00 : 18417 Genes in GO_BiologicalProcess-EBI-UniProt-GOA-ACAP-ARAP_25.05.2022_00h00 : 18085 All unique genes in selected ontologies: 19243 (reference set for hypergeometric test) Genes from Cluster#1: unique uploaded ids 27 -&gt; corresponding genes 27, with 0 (0.0%) missing -&gt; All genes were recognized by ClueGO. Genes with functional annotations in all selected Ontologies from Cluster#1: 27 (100.0%) Genes from all Clusters associated to 18 representative Terms and Pathways (after applying general selection criteria): 13 (48.15%) Genes from all Clusters associated to 7 representative Terms and Pathways (after fusion selection criteria): 10 (37.04%) Hierarchical grouping: Start Hierarchical grouping: Final Hierarchical groups = 1 Terms not grouped = 4 GO All Terms Specific for Cluster #1: 7 Ontology used: GO_BiologicalProcess-EBI-UniProt-GOA-ACAP-ARAP_25.05.2022_00h00 GO_MolecularFunction-EBI-UniProt-GOA-ACAP-ARAP_25.05.2022_00h00 Evidence codes used: All Identifiers used: SymbolID List of missing Genes: Cluster #1 Statistical Test Used = Enrichment/Depletion (Two-sided hypergeometric test) Correction Method Used = Bonferroni step down Min GO Level = 3 Max GO Level = 8 Cluster #1 Sample File Name = Network selection: Network 4 default network Number of Genes = 2 Min Percentage = 4.0 GO Fusion = true GO Group = true Kappa Score Threshold = 0.53 Over View Term = SmallestPValue Group By Parents = true Common Parents Number = 3 Different Parents Number = 4 * Merge ClueGO result with Network 4 * Optimize view manually and with Layouts, edit Node label if needed. 6.3 Terminal Analysis of network 6.3.1 Rstudio and Packages 6.3.2 Shiny Framework library(visNetwork) nodes &lt;- data.frame(id = 1:10, label = paste(&quot;Node&quot;, 1:10), value = c(10,5,3,7,2,3,2.6,2,9,2), shape =&quot;circle&quot;, group= c(&quot;Gr1&quot;,&quot;Gr3&quot;), color= c(&quot;#DF0101&quot;, &quot;blue&quot;) ) edges &lt;- data.frame(from = c(1,5,3,7,2,9,10,8,3,3,6), to = c(5,3,5,1,5,1,2,3,7,4,9) ) graphe &lt;- visNetwork::visNetwork(nodes, edges, width = &quot;100%&quot;) visNetwork::visOptions(graph= graphe, manipulation = TRUE, selectedBy = &quot;group&quot;, highlightNearest = TRUE ) References "],["others.html", "Chapter 7 Others", " Chapter 7 Others "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
